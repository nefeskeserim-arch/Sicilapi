import os
import json
import gdown
import requests
from flask import Flask, jsonify
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import threading
import logging
import sqlite3
import traceback

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Zorunlu kanallar
REQUIRED_CHANNELS = ["@nabisystem", "@watronschecker"]

# Database i√ßin
def init_db():
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                remaining_searches INTEGER DEFAULT 3,
                invited_users INTEGER DEFAULT 0,
                total_invites INTEGER DEFAULT 0,
                bonus_received BOOLEAN DEFAULT FALSE
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database tablosu olu≈üturuldu")
    except Exception as e:
        logger.error(f"‚ùå Database hatasƒ±: {e}")

def get_user_data(user_id):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            cursor.execute('''
                INSERT INTO users (user_id, remaining_searches, invited_users, total_invites, bonus_received) 
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, 3, 0, 0, False))
            conn.commit()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
        
        conn.close()
        
        if user:
            return {
                'user_id': user[0],
                'remaining_searches': user[1],
                'invited_users': user[2],
                'total_invites': user[3],
                'bonus_received': bool(user[4])
            }
        else:
            return {
                'user_id': user_id,
                'remaining_searches': 3,
                'invited_users': 0,
                'total_invites': 0,
                'bonus_received': False
            }
            
    except Exception as e:
        logger.error(f"‚ùå get_user_data hatasƒ±: {e}")
        return {
            'user_id': user_id,
            'remaining_searches': 3,
            'invited_users': 0,
            'total_invites': 0,
            'bonus_received': False
        }

def update_user_searches(user_id, new_count):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET remaining_searches = ? WHERE user_id = ?', (new_count, user_id))
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ Kullanƒ±cƒ± {user_id} sorgu hakkƒ± g√ºncellendi: {new_count}")
    except Exception as e:
        logger.error(f"‚ùå update_user_searches hatasƒ±: {e}")

def add_invite(user_id):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT invited_users, bonus_received FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result:
            current_invites = result[0]
            bonus_received = bool(result[1])
            new_invites = current_invites + 1
            
            logger.info(f"üì® Davet ekleniyor: {user_id} -> {current_invites} -> {new_invites}")
            
            cursor.execute('UPDATE users SET invited_users = ?, total_invites = total_invites + 1 WHERE user_id = ?', 
                          (new_invites, user_id))
            
            if new_invites >= 3 and not bonus_received:
                cursor.execute('SELECT remaining_searches FROM users WHERE user_id = ?', (user_id,))
                current_searches = cursor.fetchone()[0]
                new_searches = current_searches + 30
                
                cursor.execute('UPDATE users SET remaining_searches = ?, bonus_received = TRUE WHERE user_id = ?', 
                              (new_searches, user_id))
                conn.commit()
                conn.close()
                logger.info(f"üéâ Kullanƒ±cƒ± {user_id} 30 sorgu hakkƒ± bonusu kazandƒ±! Yeni hak: {new_searches}")
                return True
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ Kullanƒ±cƒ± {user_id} davet sayƒ±sƒ± g√ºncellendi: {new_invites}")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå add_invite hatasƒ±: {e}")
        return False

# Google Drive'dan JSON indirme - G√úNCELLENMƒ∞≈û
def download_json_file():
    json_path = "sicil.json"
    
    # √ñnce mevcut dosyayƒ± sil (cache problemi)
    if os.path.exists(json_path):
        os.remove(json_path)
        logger.info("üóëÔ∏è Eski JSON dosyasƒ± silindi")
    
    try:
        # DIRECT Google Drive link
        drive_url = "https://drive.google.com/uc?id=1dIkedxpzP7GSPDPbkGAise-WhZ3oTwJ0"
        logger.info(f"üì• DIRECT Drive indirme: {drive_url}")
        
        # gdown ile indir
        gdown.download(drive_url, json_path, quiet=False)
        
        # Kontrol et
        if os.path.exists(json_path):
            file_size = os.path.getsize(json_path)
            logger.info(f"‚úÖ JSON indirildi! Boyut: {file_size} bytes")
            
            if file_size > 0:
                return True
            else:
                logger.error("‚ùå Dosya bo≈ü!")
                return False
        else:
            logger.error("‚ùå Dosya olu≈üturulamadƒ±!")
            return False
            
    except Exception as e:
        logger.error(f"üö® ƒ∞ndirme hatasƒ±: {str(e)}")
        logger.error(f"üö® Traceback: {traceback.format_exc()}")
        return False

def search_by_tc(tc):
    try:
        if not download_json_file():
            return "JSON dosyasƒ± y√ºklenemedi"
        
        with open('sicil.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        sonuclar = []
        toplam_sayfa = 0
        toplam_kayit = 0
        
        if isinstance(data, list):
            for i, item in enumerate(data):
                if isinstance(item, dict):
                    if 'Veri' in item and isinstance(item['Veri'], list):
                        toplam_sayfa += 1
                        sayfa_kayitlari = item['Veri']
                        toplam_kayit += len(sayfa_kayitlari)
                        
                        for kayit in sayfa_kayitlari:
                            if isinstance(kayit, dict):
                                kisi_tc = str(kayit.get('KISI_TC_KIMLIK_NO', '')).strip()
                                avukat_tc = str(kayit.get('AVUKAT_TC_KIMLIK_NO', '')).strip()
                                
                                if kisi_tc == tc or avukat_tc == tc:
                                    sonuclar.append(kayit)
                    
                    elif any(key in item for key in ['KISI_TC_KIMLIK_NO', 'AVUKAT_TC_KIMLIK_NO']):
                        toplam_kayit += 1
                        kisi_tc = str(item.get('KISI_TC_KIMLIK_NO', '')).strip()
                        avukat_tc = str(item.get('AVUKAT_TC_KIMLIK_NO', '')).strip()
                        
                        if kisi_tc == tc or avukat_tc == tc:
                            sonuclar.append(item)
        
        logger.info(f"‚úÖ {toplam_sayfa} sayfa, {toplam_kayit} kayƒ±t tarandƒ±, {len(sonuclar)} e≈üle≈üme")
        return sonuclar
        
    except Exception as e:
        return f"Hata: {e}"

# Flask routes
@app.route('/')
def home():
    json_loaded = os.path.exists('sicil.json')
    return jsonify({
        "status": "active", 
        "message": "Sicil Sorgulama Bot API",
        "json_loaded": json_loaded
    })

@app.route('/health')
def health():
    json_status = download_json_file()  # Zorunlu indirme
    file_size = os.path.getsize('sicil.json') if json_status else 0
    
    return jsonify({
        "status": "healthy" if json_status else "error",
        "json_downloaded": json_status,
        "json_size": file_size,
        "drive_url": "https://drive.google.com/uc?id=1dIkedxpzP7GSPDPbkGAise-WhZ3oTwJ0"
    })

@app.route('/test-drive')
def test_drive():
    """Google Drive baƒülantƒ± testi"""
    try:
        test_url = "https://drive.google.com/uc?id=1dIkedxpzP7GSPDPbkGAise-WhZ3oTwJ0"
        response = requests.get(test_url, stream=True)
        
        return jsonify({
            "status_code": response.status_code,
            "content_type": response.headers.get('content-type', ''),
            "content_length": response.headers.get('content-length', '0')
        })
    except Exception as e:
        return jsonify({"error": str(e)})

# Telegram Bot
def run_telegram_bot():
    try:
        BOT_TOKEN = os.getenv('BOT_TOKEN', '8259938188:AAFy5l5UWmGThqFNwDu2gyqybOh_hE3vPfM')
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        async def check_channel_membership(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            missing_channels = []
            
            for channel in REQUIRED_CHANNELS:
                try:
                    member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
                    if member.status not in ['member', 'administrator', 'creator']:
                        missing_channels.append(channel)
                except Exception as e:
                    missing_channels.append(channel)
            
            return missing_channels

        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # Referans i≈ülemi
            if context.args:
                try:
                    referrer_id = int(context.args[0])
                    if referrer_id != user_id:
                        bonus_verildi = add_invite(referrer_id)
                        if bonus_verildi:
                            await context.bot.send_message(
                                referrer_id,
                                "üéâ **TEBRƒ∞KLER! 3 Kƒ∞≈ûƒ∞ DAVET ETTƒ∞Nƒ∞Z!**\n\n"
                                "‚úÖ **30 SORGU HAKKI** kazandƒ±nƒ±z!\n\n"
                                "@nabisystem @watronschecker"
                            )
                except ValueError:
                    pass
            
            # Kanal kontrol√º
            missing_channels = await check_channel_membership(update, context)
            
            if missing_channels:
                buttons = []
                for channel in missing_channels:
                    buttons.append([InlineKeyboardButton(f"üì¢ {channel} Katƒ±l", url=f"https://t.me/{channel[1:]}")])
                buttons.append([InlineKeyboardButton("‚úÖ Kontrol Et", callback_data="check_membership")])
                reply_markup = InlineKeyboardMarkup(buttons)
                
                await update.message.reply_text(
                    "‚ùå **Kanal √úyeliƒüi Gerekli**\n\n"
                    "Botu kullanmak i√ßin a≈üaƒüƒ±daki kanallara katƒ±lmanƒ±z gerekiyor:\n\n" +
                    "\n".join([f"‚Ä¢ {channel}" for channel in missing_channels]) +
                    "\n\nKanallara katƒ±ldƒ±ktan sonra '‚úÖ Kontrol Et' butonuna tƒ±klayƒ±n.",
                    reply_markup=reply_markup
                )
                return
            
            # Ana men√º
            user_data = get_user_data(user_id)
            await update.message.reply_text(
                f"üîç **Sicil Sorgulama Botu**\n\n"
                f"**Kalan Sorgu Hakkƒ±:** {user_data['remaining_searches']}\n"
                f"**Davet Edilen:** {user_data['invited_users']}/3 ki≈üi\n"
                f"**Toplam Davet:** {user_data['total_invites']} ki≈üi\n"
                f"**Bonus Durumu:** {'‚úÖ 30 HAK KAZANILDI' if user_data['bonus_received'] else '‚ùå 30 HAK BEKLƒ∞YOR'}\n\n"
                "**Komutlar:**\n"
                "‚Ä¢ `/sicil 12345678901` - TC sorgula\n"
                "‚Ä¢ `/referans` - Davet linkini al\n\n"
                "üéâ **3 arkada≈üƒ±nƒ± davet et, 30 SORGU HAKKI kazan!**\n\n"
                "@nabisystem @watronschecker"
            )

        async def sicil_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # Kanal kontrol√º
            missing_channels = await check_channel_membership(update, context)
            if missing_channels:
                await update.message.reply_text("‚ùå √ñnce t√ºm kanallara katƒ±lmalƒ±sƒ±nƒ±z! /start")
                return
            
            user_data = get_user_data(user_id)
            
            if user_data['remaining_searches'] <= 0:
                await update.message.reply_text(
                    "‚ùå **Sorgu hakkƒ±nƒ±z kalmadƒ±!**\n\n"
                    "Yeni hak kazanmak i√ßin 3 arkada≈üƒ±nƒ±zƒ± davet edin:\n"
                    "`/referans`\n\n"
                    "üéâ **3 davet = 30 SORGU HAKKI!**\n\n"
                    "@nabisystem @watronschecker"
                )
                return
            
            if not context.args:
                await update.message.reply_text("‚ùå **Doƒüru kullanƒ±m:** `/sicil 12345678901`")
                return
            
            tc = context.args[0]
            
            if not tc.isdigit() or len(tc) != 11:
                await update.message.reply_text("‚ùå Ge√ßersiz TC kimlik numarasƒ±! 11 haneli numara girin.")
                return
            
            # Hak sayƒ±sƒ±nƒ± g√ºncelle
            update_user_searches(user_id, user_data['remaining_searches'] - 1)
            
            await update.message.reply_text("üîç Sicil kayƒ±tlarƒ± aranƒ±yor... @nabisystem @watronschecker")
            
            # Arama yap
            sonuclar = search_by_tc(tc)
            
            if isinstance(sonuclar, str):
                await update.message.reply_text(f"‚ùå {sonuclar}\n\n@nabisystem @watronschecker")
                return
            
            if not sonuclar:
                await update.message.reply_text(f"‚ùå **{tc}** numarasƒ±na ait sicil kaydƒ± bulunamadƒ±.\n\n@nabisystem @watronschecker")
                return
            
            # Sonu√ßlarƒ± g√∂ster (ilk 3 kayƒ±t)
            for i, kayit in enumerate(sonuclar[:3]):
                mesaj = f"**Kayƒ±t {i+1}:**\n"
                
                if kayit.get('KISI_TC_KIMLIK_NO') == tc:
                    mesaj += f"üë§ **M√ºvekkil:** {kayit.get('KISI_ADI', '')} {kayit.get('KISI_SOYAD', '')}\n"
                    mesaj += f"‚öñÔ∏è **Su√ß:** {kayit.get('KISI_SUC_ADI', '')}\n"
                    mesaj += f"üé≠ **Tip:** {kayit.get('KISI_TIP_ADI', '')}\n"
                else:
                    mesaj += f"‚öñÔ∏è **Avukat:** {kayit.get('AVUKAT_ADI', '')} {kayit.get('AVUKAT_SOYADI', '')}\n"
                    mesaj += f"üî¢ **Sicil No:** {kayit.get('AVUKAT_SICIL_NO', '')}\n"
                
                mesaj += f"üìÅ **Dosya:** {kayit.get('DOSYA_NO', '')}\n"
                mesaj += f"üèõÔ∏è **Kurum:** {kayit.get('KURUM_ADI', '')}\n"
                mesaj += f"üìÖ **Tarih:** {kayit.get('GOREV_TARIHI', '')[:10]}\n\n"
                mesaj += "@nabisystem @watronschecker"
                
                await update.message.reply_text(mesaj)
            
            # Kalan haklarƒ± g√∂ster
            user_data = get_user_data(user_id)
            await update.message.reply_text(
                f"‚úÖ **Arama tamamlandƒ±!**\n"
                f"**Kalan Sorgu Hakkƒ±:** {user_data['remaining_searches']}\n"
                f"**Bulunan Kayƒ±t:** {len(sonuclar)} adet\n\n"
                "@nabisystem @watronschecker"
            )

        async def referans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # Kanal kontrol√º
            missing_channels = await check_channel_membership(update, context)
            if missing_channels:
                await update.message.reply_text("‚ùå √ñnce t√ºm kanallara katƒ±lmalƒ±sƒ±nƒ±z! /start")
                return
            
            user_data = get_user_data(user_id)
            
            bot_username = (await context.bot.get_me()).username
            invite_link = f"https://t.me/{bot_username}?start={user_id}"
            
            # Davet durumuna g√∂re mesaj
            if user_data['bonus_received']:
                bonus_text = "‚úÖ **30 SORGU HAKKI ZATEN KAZANILDI!**"
                info_text = "üéâ Bonusu zaten aldƒ±nƒ±z! Yeni davetler i√ßin te≈üekk√ºrler."
            elif user_data['invited_users'] >= 3:
                bonus_text = "‚úÖ **30 SORGU HAKKI HAK EDƒ∞LDƒ∞!**"
                info_text = "üéâ 3 ki≈üi davet ettiniz! Bonus otomatik olarak eklendi."
            else:
                kalan = 3 - user_data['invited_users']
                bonus_text = f"‚ùå **{kalan} ki≈üi kaldƒ±!**"
                info_text = f"üî• {kalan} ki≈üi daha davet ederek 30 SORGU HAKKI kazan!"
            
            await update.message.reply_text(
                f"üì® **REFERANS Sƒ∞STEMƒ∞**\n\n"
                f"**Davet Durumu:** {user_data['invited_users']}/3 ki≈üi\n"
                f"**Toplam Davet:** {user_data['total_invites']} ki≈üi\n"
                f"**Bonus:** {bonus_text}\n\n"
                f"{info_text}\n\n"
                f"**Davet Linkiniz:**\n`{invite_link}`\n\n"
                "üìç **Nasƒ±l √áalƒ±≈üƒ±r?**\n"
                "1. Linki arkada≈ülarƒ±nƒ±za g√∂nderin\n"
                "2. Onlar botu kullanmaya ba≈ülasƒ±n\n"
                "3. 3 ki≈üi tamamlayƒ±nca 30 HAK kazanƒ±n!\n\n"
                "@nabisystem @watronschecker"
            )

        async def check_membership_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()
            
            missing_channels = await check_channel_membership(update, context)
            
            if not missing_channels:
                await query.edit_message_text("‚úÖ **T√ºm kanallara katƒ±lƒ±m onaylandƒ±!**\n\nBotu kullanmaya ba≈ülayabilirsiniz.")
                await start_command(update, context)
            else:
                await query.edit_message_text("‚ùå **Hala kanallara katƒ±lmadƒ±nƒ±z!** L√ºtfen /start komutu ile tekrar deneyin.")

        # Handlers
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("sicil", sicil_command))
        application.add_handler(CommandHandler("referans", referans_command))
        application.add_handler(CallbackQueryHandler(check_membership_callback, pattern="check_membership"))
        
        logger.info("ü§ñ Telegram bot ba≈ülatƒ±lƒ±yor...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå Bot hatasƒ±: {e}")

# Uygulamayƒ± ba≈ülat
if __name__ == '__main__':
    # Database'i ba≈ülat
    init_db()
    
    # JSON'u √∂nceden indir
    logger.info("üì• JSON dosyasƒ± indiriliyor...")
    download_json_file()
    
    # Bot'u thread'te ba≈ülat
    bot_thread = threading.Thread(target=run_telegram_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Flask'ƒ± ba≈ülat
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üåê Flask API ba≈ülatƒ±lƒ±yor: port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
